1. 스크립트 설명

Network폴더 이하
-소켓 설정과 패킷 정의, 패킷을 받았을 때 클라이언트에서의 처리를 담당하는 스크립트
-패킷의 종류는 현재까지 5가지 이지만 필요에 따라 계속해서 추가할 예정입니다.

패킷 종류
-----------
유닛 이동
유닛 생성
유닛 공격
NPC 고용
턴 마침
-----------

동작 원리는 각 스크립트를 설명하면서 부연하겠습니다.

TitleControl.cs
Title 씬에 존재하는 네트워크 테스트 UI들을 관리하고 같은 컴퓨터에서 서로 다른 두 개의 게임을 실행했을 때
통신이 되는지, 패킷을 보냈을 때 각 컴퓨터에서 제대로 분해하고 관련 함수를 실행시킬 수 있는지 테스트할 수 있는
스크립트입니다.

GameData.cs
유닛 종류, 스텟, 빌딩(아지트), NPC등 게임에서 다루는 데이터들을 저장해놓은 스크립트입니다. UnitGenerator에서
유닛을 만들거나, 아지트를 초기화시킬 때, NPC를 생성할 때 이용합니다. 모두 전역 변수로 구성되어 있어 어느 스크립트던
GameData에 접근할 수 있습니다. GameData는 영구적인 데이터여서 다른 스크립트에서 절대로 변수를 변경하면 안됩니다.

Player.cs
player 스크립트는 두 명이서 게임을 하기 때문에 GameManager 스크립트에 각각 player1, player2 변수명으로 선언되어 있는 클래스입니다.
각 플레이어 클래스 안에는 현재 플레이어가 가지고 있는 gold, 턴 시작시 가지게 되는 행동력 정보, 그리고 해당 플레이어가 조종할 수 있는 unit을
리스트 형태로 가지고 있습니다. 사용 용도는 이 스크립트를 통해 gold가 표시되는 ui에 변화를 주거나, 유닛을 생성할 때 충분한 골드가 있는지 체크하거나
유닛을 생성할 때 player가 가지고 있는 골드를 차감하는 용도로 쓰입니다. GameManager가 싱글톤으로 만들어져있기 때문에 어느 곳에서나 접근 가능합니다.
추후에 유닛생성, UI를 다루는 프로그래머 모두 알아야 하는 스크립트입니다.

Building.cs
아지트에 붙는 스크립트입니다. 아지트를 building이라 보면 됩니다. 헷갈릴 수 있으니 참고해야 합니다. 아직 만들어지지 않았지만 Resources/Prefabs 폴더에 만들어져있는 
Building 프리팹을 사용해 맵과 아지트 위치, 정보를 초기화해주는 스크립트를 작성해야합니다. 프리팹에는 이미 building 스크립트와, spriteRenderer 컴포넌트가 붙어 있습니다. building 스크립트 안 initiateBuilding 함수를 통해
적절한 sprite와 정보를 GameData에서 가져와 building스크립트에 할당해줍니다.
아지트가 현재 어느 플레이어에게 점령되어 있는지, 위치는 어디인지, 아지트의 고유번호(building_id) 등의 변수를 가지고 있고 네트워크단에서는 id를 이용해 통신하므로
unit만큼은 아니지만 building_id는 통신에 중요한 역할을 합니다.

UnitGenerator.cs
게임오브젝트 UnitGenerator안에 붙어 있는 함수로 게임 내내 유닛을 생성해주는 역할을 합니다. 유닛 생성시에는 Resources/Prefabs에 있는 Unit 프리팹을 인스턴트화 하고
생성하는 유닛 종류에 따라 적절한 정보를 유닛 스크립트에 넣어주는 역할을 합니다. GenerateUnit함수는 유닛종류, 생성하는 아지트 id, 생성시키는 좌표를 x,y로 받고
해당 정보를 이용해 유닛을 생성하고 위치시킵니다. 어느 플레이어가 유닛을 생성하는 지는 building id를 통해 아지트가 누구한테 점령되어 있는지 판단할 수 있으므로
따로 정보를 받지 않아도 됩니다. 유닛을 로컬 클라이언트에서 생성한 후 네트워크로 똑같이 유닛종류, 생성하는 아지트 id, 좌표를 패킷으로 만들어 상대편 컴퓨터에 보내고
상대편 컴퓨터는 이를 분해해 로컬 클라이언트와 똑같은 유닛 생성 작업을 합니다.

Unit.cs
유닛에 대한 정보를 가지고 있는 함수로 각종 스텟이 구조체 형식으로 되어 있는 unitData, 현재 hp인 curhp, 논리적 위치 x,y, 조종하고 있는 플레이어를 나타내는
control_player, 그리고 유닛의 고유 아이디인 unitID가 있습니다. unitID는 이동이나, 공격 구현에서 패킷이 이용하는 정보여서 매우 중요합니다.
유닛을 초기화하는 함수나, 데미지를 받는 함수가 현재까지는 작성되어 있습니다. 유닛을 클라이언트 내에서 움직이는(애니메이션, 논리적 좌표포함)
함수를 클라이언트 프로그래머가 작성해야하며, 유닛을 클릭했을 때 UI에 정보를 보내주는 함수 등 다수의 프로그래머가 동시에 접근하게 될 중요한 스크립트입니다.

UnitAttack.cs
유닛 공격을 구현하는 클래스입니다. unitID로 공격하는 유닛과 수비하는 유닛을 받아, 시스템 기획에 따른 명세를 처리해서 유닛의 애니메이션처리까지 작성하는 
함수입니다. 또한 공격시 역시 공격자 id와 수비자 id를 네트워크로 보내 다른 컴퓨터에서도 똑같이 발생하게 할 것입니다. monobehavior를 상속 받지 않았기 때문에
 따로 게임 오브젝트로 존재하지 않고 유닛 클래스나, 패킷을 분해하는 함수에서 직접 클래스를 선언한 후 사용하게 됩니다.  

GameManager.cs
Player데이터, 내가 player1인지 2인지, 아지트(building)의 리스트, 현재 내 턴이지 판단하는 bool 변수, 유닛생성이나 아지트생성시 부여하는 id를 관리하는 스크립트입니다.
또한 게임 상에 존재하는 unit, building, player에 대한 데이터를 모두 가지고 있고 싱글톤으로 작성되어 있어서 unitID를 통해 유닛 게임 오브젝트를 직접 가져오는 등, 사용할 수 
있는 함수를 확장시켜서 만들 수 있고, 내 턴과 적 턴을 구분하는 말 그대로 게임을 manage하는 스크립트입니다. 싱글톤으로 되어 있으니 변수를 바꿀 때는 조심해줘야 합니다.


2. 구현해야 하는 목록들

 -게임 오브젝트로 타일 맵을 생성하고, 관리하는 스크립트를 만들어야 합니다. 게임이 시작됬을 때 맵을 불러와 게임화면에 그려줘야 하고, 각 타일에 현재 
어떤 유닛이 존재하는지 unitID를 통해 알 수 있어야 합니다. 이를 이용해서 유닛을 움직이는 범위나 움직이는 스크립트를 구현해야 하기 때문입니다.

 -유닛을 움직이는 함수를 구현해야 합니다. unit.cs에 애니메이션, 논리적 위치, 이동가능 한 위치 UI 생성, 제거(파란색,빨간색 이런거 
아마 앞 서 말한 맵 스크립트를 이용해서 구현) 그리고 좀 까다로울 수 있는 엘레베이터도 구현해야합니다. 또한 행동력이 충분한 지 체크해줘야 하며, 이동 시 행동력을
차감해줘야 합니다.  

 -유닛이 공격 가능한 범위를 UI로 표시하고(맵 스크립트 이용) 공격 가능할 시 시스템 기획서를 이용해 효과(버프, 밤낮 등)나 스텟을 이용해 데미지를 계산하고 애니메이션과 함께 적용하는 함수를 unitAttack.cs와 unit.cs에 작성해야 합니다.
꼭 unitAttack클래스를 이용하는 방법을 사용하지는 않아도 됩니다. 다만 공격자의 unitID 수비자의 unitID를 이용하는 방식으로 작성해야합니다. 본부도 공격할 수 있다는 것도
예외사항으로 존재합니다. 또한 행동력이 충분한 지 체크해줘야 하며, 이동 시 행동력을
차감해줘야 합니다.  

 -유닛 시야를 구현해야 합니다. (내 소유의 유닛 시야만 볼 수 있게) 또한 카메라를 구현해야 합니다.

 -유닛의 정보를 표시해주는 UI와 스크립트를 만들어야 합니다. unit.cs에 클릭 함수 구현 -> ui에 정보 보내줌 -> ui에서 정보 출력 형식 추천

 -건물의 정보를 표시해주는 UI와 스크립트를 만들어야 합니다. building.cs에 클릭 함수 구현 -> ui에 정보 보내줌 -> ui에서 정보 출력 형식 추천
또한 건물 정보를 이용해 생산할 수 있는 유닛 정보를 띄어줘야 하고 유닛을 생성했을 시 구현해주는 스크립트를 GenerateUnit.cs에 구현해야 합니다. 또한 여기서 필요한만큼의
골드가 있는 지 판별하고 생성했을 시 플레이어의 골드를 차감해줘야 합니다.

 -GameManager.cs에서 랜덤으로 생성되는 NPC를 구현하고 NPC를 고용했을 때 생기는 상호작용을 npc스크립트로 따로 만들어줘야 합니다. 또한 NPC 클릭에 따라 생기는 UI 구현도
필요할 수 있습니다.

 -gold, 아지트 개수, 시간과 같은 기타 ui를 구현해야 합니다.

현재까지 크게 본 것은 이 정도인데 더 생길 수도 있습니다. 서로 연관관계가 아주 큰 것들이 있어서 그런 것들 기준으로 나누면 되겠습니다.